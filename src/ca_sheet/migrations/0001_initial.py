# Generated by Django 5.0.2 on 2024-04-10 07:40

import src.ca_sheet.utils
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('er_card', '0001_initial'),
        ('management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Complication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.PositiveSmallIntegerField(verbose_name='Group')),
                ('complication', models.CharField(max_length=150, verbose_name='Complication')),
            ],
            options={
                'verbose_name': 'Complications group',
                'verbose_name_plural': 'Complications groups',
            },
        ),
        migrations.CreateModel(
            name='MedicationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Medication group',
                'verbose_name_plural': 'Medication groups',
            },
        ),
        migrations.CreateModel(
            name='ClinicalDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateTimeField(verbose_name='Issue date')),
                ('accompanying_pathologies', models.BooleanField(default=False, verbose_name='Accompanying pathologies')),
                ('additional_information', models.TextField(blank=True, verbose_name='Additional information')),
                ('accompanying_pathologies_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accompanying_pathologies', to='management.internationalclassificationofdiseases', verbose_name='Accompanying pathologies type')),
                ('primary_disease', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clinical_diagnosis', to='management.internationalclassificationofdiseases', verbose_name='Primary disease')),
                ('complications_group_1', models.ManyToManyField(blank=True, related_name='diagnoses_group_1', to='ca_sheet.complication', verbose_name='Group 1 complications')),
                ('complications_group_2', models.ManyToManyField(blank=True, related_name='diagnoses_group_2', to='ca_sheet.complication', verbose_name='Group 3 complications')),
                ('complications_group_3', models.ManyToManyField(blank=True, related_name='diagnoses_group_3', to='ca_sheet.complication', verbose_name='Group 3 complications')),
            ],
            options={
                'verbose_name': 'Clinical diagnosis',
                'verbose_name_plural': 'Clinical diagnoses',
            },
        ),
        migrations.CreateModel(
            name='ConditionAssessmentSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Create date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_sheets', to='management.doctor', verbose_name='Created doctor')),
                ('er_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ch_sheets', to='er_card.electronicrehabilitationcard', verbose_name='Electronic rehabilitation card')),
            ],
            options={
                'verbose_name': 'Condition assessment sheet',
                'verbose_name_plural': 'Condition assessment sheets',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='ca_sheet.medicationgroup', verbose_name='Medication group')),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
            },
        ),
        migrations.CreateModel(
            name='FirstStageData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_complaint', models.CharField(max_length=250, verbose_name='Main complaint')),
                ('side_complaints', models.TextField(blank=True, verbose_name='Side complaints')),
                ('cardiovascular_diseases', models.BooleanField(default=False, verbose_name='Was cardiovascular diseases')),
                ('early_deaths', models.BooleanField(default=False, verbose_name='Was early deaths')),
                ('bad_habits', models.BooleanField(default=False, verbose_name='Has bad habits')),
                ('cvd_hospitalizations', models.BooleanField(default=False, verbose_name='CVD hospitalizations')),
                ('latest_hospitalization', models.DateTimeField(blank=True, null=True, verbose_name='Latest hospitalization date')),
                ('hospitalization_reason', models.CharField(blank=True, max_length=150, verbose_name='Hospitalization reason')),
                ('disease_outcome_data', models.TextField(blank=True, verbose_name='Disease outcome data')),
                ('allergic_reactions', models.BooleanField(default=False, verbose_name='Allergic reactions')),
                ('for_medicines', models.CharField(blank=True, max_length=150, verbose_name='Allergic for medicines')),
                ('for_food', models.CharField(blank=True, max_length=150, verbose_name='Allergic for food')),
                ('for_other', models.CharField(blank=True, max_length=150, verbose_name='Allergic for other')),
                ('cvd_medications', models.BooleanField(default=False, verbose_name='CVD medications taken')),
                ('dosage', models.CharField(blank=True, max_length=150, verbose_name='Dosage')),
                ('use_duration', models.CharField(blank=True, max_length=150, verbose_name='Use duration')),
                ('morisky_green', models.PositiveSmallIntegerField(choices=[(1, 'Disaffected'), (2, 'Uncommitted'), (3, 'Under committed'), (4, 'Complaint')], verbose_name='Morisky Green')),
                ('ca_sheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='first_stage', to='ca_sheet.conditionassessmentsheet', verbose_name='Condition Assessment sheet')),
                ('medication_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_sheets', to='ca_sheet.medication', verbose_name='Medication name')),
                ('medication_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_sheets', to='ca_sheet.medicationgroup', verbose_name='Medication group')),
            ],
            options={
                'verbose_name': 'First stage data',
                'verbose_name_plural': 'First stage data',
            },
        ),
        migrations.CreateModel(
            name='SecondStageData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination_date', models.DateTimeField(verbose_name='Date of examination')),
                ('weight', models.FloatField(verbose_name='Weight')),
                ('height', models.FloatField(verbose_name='Height')),
                ('body_mass_index', models.FloatField(verbose_name='Body mass index')),
                ('body_temperature', models.FloatField(verbose_name='Body temperature')),
                ('systolic_pressure', models.FloatField(verbose_name='Systolic blood pressure')),
                ('diastolic_pressure', models.FloatField(verbose_name='Diastolic blood pressure')),
                ('radial_artery_pulse_rate', models.FloatField(blank=True, null=True, verbose_name='Radial artery pulse rate')),
                ('respiratory_rate', models.FloatField(blank=True, null=True, verbose_name='Respiratory rate')),
                ('moist_rales', models.BooleanField(blank=True, default=False, verbose_name='Lung moist rales')),
                ('lower_limb_edema', models.BooleanField(blank=True, default=False, verbose_name='Swelling of the lower limbs')),
                ('ecg_date', models.DateTimeField(verbose_name='ECG date')),
                ('heart_rate', models.FloatField(verbose_name='Heart rate')),
                ('heart_rhythm', models.CharField(max_length=100, verbose_name='Heart rhythm')),
                ('st_segment_depression', models.BooleanField(default=False, verbose_name='ST segment depression')),
                ('st_segment_depression_duration', models.BooleanField(default=False, verbose_name='ST segment depression duration')),
                ('st_segment_elevation', models.BooleanField(default=False, verbose_name='ST segment elevation')),
                ('q_wave_or_qs_complex', models.BooleanField(default=False, verbose_name='Pathalogical Q wave or QS complex')),
                ('t_wave_inversion', models.BooleanField(default=False, verbose_name='T wave inversion ')),
                ('ecg_attachment', models.FileField(blank=True, null=True, upload_to='uploads/ecg/% Y/% m/% d/', verbose_name='ECG attachment')),
                ('echocg_date', models.DateTimeField(verbose_name='Echocardiography date')),
                ('interventricular_septum_hypertrophy', models.BooleanField(default=False, verbose_name='Interventricular septum hypertrophy')),
                ('lv_posterior_wall_hypertrophy', models.BooleanField(default=False, verbose_name='Left ventricular posterior wall hypertrophy')),
                ('lv_end_diastolic_size', models.BooleanField(default=False, verbose_name='Left ventricular end diastolic size')),
                ('hypokinesia_presence', models.BooleanField(default=False, verbose_name='Presence of hypokinesia')),
                ('akinesia_presence', models.BooleanField(default=False, verbose_name='Presence of akinesia')),
                ('dyskinesia_presence', models.BooleanField(default=False, verbose_name='Presence of dyskinesia')),
                ('acute_aneurysm', models.BooleanField(default=False, verbose_name='Acute aneurysm')),
                ('myocardial_rupture', models.BooleanField(default=False, verbose_name='Myocardial rupture')),
                ('left_ventricle_decreased_pumping_function', models.CharField(choices=[('lt-54', 'Less than 54%'), ('lt-40', 'Less than 40%')], max_length=10, verbose_name='Left ventricular decreased pumping function')),
                ('heart_cavity_platelet_vegetations', models.BooleanField(default=False, verbose_name='Platelet vegetations in heart cavity valves')),
                ('echocg_attachment', models.FileField(blank=True, null=True, upload_to='uploads/echocg/% Y/% m/% d/', verbose_name='EchoCG attachment')),
                ('hm_ecg_date', models.DateTimeField(verbose_name='Holter Monitoring ECG date')),
                ('heart_rate_max', models.FloatField(blank=True, null=True, verbose_name='Maximum heart rate')),
                ('heart_rate_min', models.FloatField(blank=True, null=True, verbose_name='Minimum heart rate')),
                ('heart_rate_avg', models.FloatField(verbose_name='Average heart rate')),
                ('heart_rhythm_disorders', models.BooleanField(default=False, verbose_name='Heart rhythm disorders')),
                ('heart_rhythm_disorders_type', models.CharField(blank=True, choices=[('normal_sinus', 'Normal sinus rhythm'), ('arrhythmia', 'Arrhythmia of any kind'), ('ex_rhythm', 'EX rhythm')], max_length=100, null=True, verbose_name='Heart rhythm disorders type')),
                ('SDNN', models.FloatField(blank=True, null=True, verbose_name='Heart rate variability SDNN')),
                ('SDNN_5', models.FloatField(blank=True, null=True, verbose_name='Heart rate variability SDNN 5')),
                ('SDANN', models.FloatField(blank=True, null=True, verbose_name='Heart rate variability SDANN')),
                ('hm_st_segment_depression', models.BooleanField(default=False, verbose_name='ST segment depression')),
                ('hm_st_segment_depression_duration', models.BooleanField(default=False, verbose_name='ST segment depression duration')),
                ('hm_st_segment_elevation', models.BooleanField(default=False, verbose_name='ST segment elevation')),
                ('hm_q_wave_or_qs_complex', models.BooleanField(default=False, verbose_name='Pathalogical Q wave or QS complex')),
                ('hm_t_wave_inversion', models.BooleanField(default=False, verbose_name='T wave inversion ')),
                ('hm_ecg_attachment', models.FileField(blank=True, null=True, upload_to='uploads/hm_ecg/% Y/% m/% d/', verbose_name='Holter Monitoring ECG attachment')),
                ('ca_sheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='second_stage', to='ca_sheet.conditionassessmentsheet', verbose_name='Condition Assessment sheet')),
            ],
            options={
                'verbose_name': 'Second stage data',
                'verbose_name_plural': 'Second stage data',
            },
        ),
        migrations.CreateModel(
            name='MyocardialNecrosisBiochemicalMarker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=90, verbose_name='MNBM title')),
                ('mnbm_date', models.DateField(verbose_name='MNBM date')),
                ('file', models.FileField(upload_to=src.ca_sheet.utils.get_file_path, verbose_name='MNBM file')),
                ('second_stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mnbm_data', to='ca_sheet.secondstagedata', verbose_name='Second stage data')),
            ],
            options={
                'verbose_name': 'MNBM attached file',
                'verbose_name_plural': 'MNBM attached files',
            },
        ),
        migrations.CreateModel(
            name='AdditionalTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=90, verbose_name='Title')),
                ('file', models.FileField(upload_to=src.ca_sheet.utils.get_file_path, verbose_name='File')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Create date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('second_stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_test_results', to='ca_sheet.secondstagedata', verbose_name='Second stage data')),
            ],
            options={
                'verbose_name': 'Additional test result',
                'verbose_name_plural': 'Additional test results',
            },
        ),
        migrations.CreateModel(
            name='ThirdStageData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coronary_insufficiency', models.CharField(choices=[('absent', 'Absent'), ('rare', 'Rare'), ('moderate', 'Moderate'), ('frequent', 'Frequent')], max_length=10, verbose_name='Coronary insufficiency')),
                ('ahf_severity_class', models.PositiveSmallIntegerField(choices=[(1, 'Normal'), (2, 'Slightly reduced'), (3, 'Anomalous'), (4, 'Severe deficiency')], verbose_name='AHF severity class according to the Killip classification')),
                ('nyha_functional_class', models.PositiveSmallIntegerField(choices=[(1, 'Normal'), (2, 'Light'), (3, 'Anomalous'), (4, 'Severe')], verbose_name='Functional class according to NYHA classification')),
                ('clinical_case_ami', models.BooleanField(default=False, verbose_name='Clinical case of AMI')),
                ('ami_date', models.DateTimeField(blank=True, null=True, verbose_name='Date of AMI')),
                ('ami_localization', models.CharField(blank=True, choices=[('anterior_wall', 'Anterior wall'), ('anterior_apical', 'Anterior-apical'), ('anterolateral', 'Anterolateral'), ('anterior_septal', 'Anterior septal'), ('diaphragmatic', 'Diaphragmatic'), ('inferolateral', 'Inferolateral'), ('inferoposterior', 'Inferoposterior'), ('inferobasal', 'Inferobasal'), ('apical_lateral', 'Apical-lateral'), ('basalolateral', 'Basal-lateral'), ('superolateral', 'Superolateral'), ('lateral', 'Lateral'), ('rear', 'Rear'), ('posterobasal', 'Posterobasal'), ('posterolateral', 'Posterolateral'), ('posteroseptal', 'Posteroseptal'), ('septal', 'Septal'), ('right_ventricle', 'Right ventricle')], max_length=150, verbose_name='Localization of AMI')),
                ('mi_type', models.CharField(blank=True, choices=[('type_1', 'Spontaneous MI caused by rupture or erosion of the ASB'), ('type_2', 'Secondary myocardial infarction associated with decreased oxygen supply'), ('type_3', 'Sudden coronary death'), ('type_4a', 'MI associated with PCI'), ('type_4b', 'MI associated with stent thrombosis after PCI'), ('type_4c', 'MI associated with restenosis after PCI'), ('type_5', 'MI associated with coronary artery bypass grafting.')], max_length=150, verbose_name='Type of Miocardium Infarction')),
                ('myocardium_depth_extent', models.CharField(blank=True, choices=[('small_focal', 'Small-focal'), ('macrofocal_nontransmural', 'Macrofocal nontransmural'), ('transmural_circular', 'Transmural circular')], max_length=150, verbose_name='Depth and extent of myocardial damage')),
                ('acs_characteristics', models.CharField(blank=True, choices=[('unstable_angina', 'Unstable angina'), ('mi_without_st', 'Myocardial Infarction without ST'), ('mi_with_st', 'Myocardial Infarction with ST'), ('mi_without_q_wave', 'Myocardial Infarction without Q wave'), ('mi_with_q_wave', 'Myocardial Infarction with Q wave')], max_length=150, verbose_name='Characteristics of ACS')),
                ('coronary_angiography', models.BooleanField(default=False, verbose_name='Coronary angiography')),
                ('stenting', models.BooleanField(default=False, verbose_name='Stenting')),
                ('revascularization', models.BooleanField(default=False, verbose_name='Revascularization')),
                ('is_complete', models.BooleanField(default=False, verbose_name='Is complete')),
                ('coronary_lesion_degree', models.CharField(choices=[('single_vessel', 'Single vessel'), ('two_vessel', 'Two vessel'), ('multivessel', 'Multivessel')], max_length=150, verbose_name='Degree of the coronary lesion')),
                ('affected_vessel_name', models.CharField(choices=[('left_coronary_artery_trunk', 'Left coronary artery trunk'), ('anterior_descending_artery', 'Anterior descending artery'), ('diagonal_artery', 'Diagonal artery'), ('circumflex_artery', 'Circumflex artery'), ('blunt_edge_branch', 'Blunt edge branch'), ('septal_interventricular_branches', 'Septal interventricular branches'), ('intermediate_artery', 'Intermediate artery'), ('right_coronary_artery', 'Right coronary artery'), ('sharp_edge_branch', 'Sharp edge branch'), ('sinoatrial_node_artery', 'Sinoatrial node Artery'), ('posterior_interventricular_branch', 'Posterior interventricular branch')], max_length=50, null=True, verbose_name='Name of the affected vessel')),
                ('vessel_lesion_volume', models.FloatField(verbose_name='Vessel lesion volume')),
                ('index_syntax', models.FloatField(blank=True, null=True, verbose_name='Index SYNTAX')),
                ('ca_attached', models.FileField(blank=True, null=True, upload_to='uploads/coronary_angiography/% Y/% m/% d/')),
                ('ca_sheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='third_stage', to='ca_sheet.conditionassessmentsheet', verbose_name='Condition Assessment sheet')),
            ],
            options={
                'verbose_name': 'First stage data',
                'verbose_name_plural': 'First stage data',
            },
        ),
    ]
